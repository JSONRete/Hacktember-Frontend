"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var errors_exports = {};
__export(errors_exports, {
  MagicLinkErrorCode: () => import_shared.MagicLinkErrorCode,
  hocChildrenNotAFunctionError: () => hocChildrenNotAFunctionError,
  invalidStateError: () => invalidStateError,
  isClerkAPIResponseError: () => import_shared.isClerkAPIResponseError,
  isKnownError: () => import_shared.isKnownError,
  isMagicLinkError: () => import_shared.isMagicLinkError,
  isMetamaskError: () => import_shared.isMetamaskError,
  multipleChildrenInButtonComponent: () => multipleChildrenInButtonComponent,
  multipleClerkProvidersError: () => multipleClerkProvidersError,
  noClerkProviderError: () => noClerkProviderError,
  noFrontendApiError: () => noFrontendApiError,
  noGuaranteedLoadedError: () => noGuaranteedLoadedError,
  noGuaranteedUserError: () => noGuaranteedUserError,
  unsupportedNonBrowserDomainOrProxyUrlFunction: () => unsupportedNonBrowserDomainOrProxyUrlFunction
});
module.exports = __toCommonJS(errors_exports);
var import_shared = require("@clerk/shared");
const noFrontendApiError = "Clerk: You must add the frontendApi prop to your <ClerkProvider>";
const noClerkProviderError = "Clerk: You must wrap your application in a <ClerkProvider> component.";
const noGuaranteedLoadedError = (hookName) => `Clerk: You're calling ${hookName} before there's a guarantee the client has been loaded. Call ${hookName} from a child of <SignedIn>, <SignedOut>, or <ClerkLoaded>, or use the withClerk() HOC.`;
const noGuaranteedUserError = (hookName) => `Clerk: You're calling ${hookName} before there's a guarantee there's an active user. Call ${hookName} from a child of <SignedIn> or use the withUser() HOC.`;
const multipleClerkProvidersError = "Clerk: You've added multiple <ClerkProvider> components in your React component tree. Wrap your components in a single <ClerkProvider>.";
const hocChildrenNotAFunctionError = "Clerk: Child of WithClerk must be a function.";
const multipleChildrenInButtonComponent = (name) => `Clerk: You've passed multiple children components to <${name}/>. You can only pass a single child component or text.`;
const invalidStateError = "Invalid state. Feel free to submit a bug or reach out to support here: https://clerk.com/support";
const unsupportedNonBrowserDomainOrProxyUrlFunction = "Unsupported usage of domain or proxyUrl. The usage of domain or proxyUrl as function is not supported in non-browser environments.";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MagicLinkErrorCode,
  hocChildrenNotAFunctionError,
  invalidStateError,
  isClerkAPIResponseError,
  isKnownError,
  isMagicLinkError,
  isMetamaskError,
  multipleChildrenInButtonComponent,
  multipleClerkProvidersError,
  noClerkProviderError,
  noFrontendApiError,
  noGuaranteedLoadedError,
  noGuaranteedUserError,
  unsupportedNonBrowserDomainOrProxyUrlFunction
});
//# sourceMappingURL=errors.js.map