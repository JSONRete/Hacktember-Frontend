{"version":3,"sources":["../../../src/utils/loadClerkJsScript.ts"],"sourcesContent":["import { addClerkPrefix, isValidProxyUrl, loadScript, parsePublishableKey, proxyUrlToAbsoluteURL } from '@clerk/shared';\n\nimport type { IsomorphicClerkOptions } from '../types';\nimport { errorThrower } from './errorThrower';\nimport { isDevOrStagingUrl } from './isDevOrStageUrl';\n\nconst FAILED_TO_LOAD_ERROR = 'Clerk: Failed to load Clerk';\n\ntype LoadClerkJsScriptOptions = Omit<IsomorphicClerkOptions, 'proxyUrl' | 'domain'> & {\n  proxyUrl: string;\n  domain: string;\n};\n\nexport const loadClerkJsScript = async (opts: LoadClerkJsScriptOptions) => {\n  const { frontendApi, publishableKey } = opts;\n\n  if (!publishableKey && !frontendApi) {\n    errorThrower.throwMissingPublishableKeyError();\n  }\n\n  return loadScript(clerkJsScriptUrl(opts), {\n    async: true,\n    crossOrigin: 'anonymous',\n    beforeLoad: applyClerkJsScriptAttributes(opts),\n  }).catch(() => {\n    throw new Error(FAILED_TO_LOAD_ERROR);\n  });\n};\n\nconst clerkJsScriptUrl = (opts: LoadClerkJsScriptOptions) => {\n  const { clerkJSUrl, clerkJSVariant, clerkJSVersion, proxyUrl, domain, publishableKey, frontendApi } = opts;\n\n  if (clerkJSUrl) {\n    return clerkJSUrl;\n  }\n\n  let scriptHost = '';\n  if (!!proxyUrl && isValidProxyUrl(proxyUrl)) {\n    scriptHost = proxyUrlToAbsoluteURL(proxyUrl).replace(/http(s)?:\\/\\//, '');\n  } else if (domain && !isDevOrStagingUrl(parsePublishableKey(publishableKey)?.frontendApi || frontendApi || '')) {\n    scriptHost = addClerkPrefix(domain);\n  } else {\n    scriptHost = parsePublishableKey(publishableKey)?.frontendApi || frontendApi || '';\n  }\n\n  const variant = clerkJSVariant ? `${clerkJSVariant.replace(/\\.+$/, '')}.` : '';\n  const version = clerkJSVersion || getPrereleaseTag(PACKAGE_VERSION) || getMajorVersion(PACKAGE_VERSION);\n  return `https://${scriptHost}/npm/@clerk/clerk-js@${version}/dist/clerk.${variant}browser.js`;\n};\n\nconst applyClerkJsScriptAttributes = (options: LoadClerkJsScriptOptions) => (script: HTMLScriptElement) => {\n  const { publishableKey, frontendApi, proxyUrl, domain } = options;\n  if (publishableKey) {\n    script.setAttribute('data-clerk-publishable-key', publishableKey);\n  } else if (frontendApi) {\n    script.setAttribute('data-clerk-frontend-api', frontendApi);\n  }\n\n  if (proxyUrl) {\n    script.setAttribute('data-clerk-proxy-url', proxyUrl);\n  }\n\n  if (domain) {\n    script.setAttribute('data-clerk-domain', domain);\n  }\n};\n\nconst getPrereleaseTag = (packageVersion: string) => packageVersion.match(/-(.*)\\./)?.[1];\n\nconst getMajorVersion = (packageVersion: string) => packageVersion.split('.')[0];\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAwG;AAGxG,0BAA6B;AAC7B,6BAAkC;AAElC,MAAM,uBAAuB;AAOtB,MAAM,oBAAoB,OAAO,SAAmC;AACzE,QAAM,EAAE,aAAa,eAAe,IAAI;AAExC,MAAI,CAAC,kBAAkB,CAAC,aAAa;AACnC,qCAAa,gCAAgC;AAAA,EAC/C;AAEA,aAAO,0BAAW,iBAAiB,IAAI,GAAG;AAAA,IACxC,OAAO;AAAA,IACP,aAAa;AAAA,IACb,YAAY,6BAA6B,IAAI;AAAA,EAC/C,CAAC,EAAE,MAAM,MAAM;AACb,UAAM,IAAI,MAAM,oBAAoB;AAAA,EACtC,CAAC;AACH;AAEA,MAAM,mBAAmB,CAAC,SAAmC;AAC3D,QAAM,EAAE,YAAY,gBAAgB,gBAAgB,UAAU,QAAQ,gBAAgB,YAAY,IAAI;AAEtG,MAAI,YAAY;AACd,WAAO;AAAA,EACT;AAEA,MAAI,aAAa;AACjB,MAAI,CAAC,CAAC,gBAAY,+BAAgB,QAAQ,GAAG;AAC3C,qBAAa,qCAAsB,QAAQ,EAAE,QAAQ,iBAAiB,EAAE;AAAA,EAC1E,WAAW,UAAU,KAAC,8CAAkB,mCAAoB,cAAc,GAAG,eAAe,eAAe,EAAE,GAAG;AAC9G,qBAAa,8BAAe,MAAM;AAAA,EACpC,OAAO;AACL,qBAAa,mCAAoB,cAAc,GAAG,eAAe,eAAe;AAAA,EAClF;AAEA,QAAM,UAAU,iBAAiB,GAAG,eAAe,QAAQ,QAAQ,EAAE,OAAO;AAC5E,QAAM,UAAU,kBAAkB,iBAAiB,QAAe,KAAK,gBAAgB,QAAe;AACtG,SAAO,WAAW,kCAAkC,sBAAsB;AAC5E;AAEA,MAAM,+BAA+B,CAAC,YAAsC,CAAC,WAA8B;AACzG,QAAM,EAAE,gBAAgB,aAAa,UAAU,OAAO,IAAI;AAC1D,MAAI,gBAAgB;AAClB,WAAO,aAAa,8BAA8B,cAAc;AAAA,EAClE,WAAW,aAAa;AACtB,WAAO,aAAa,2BAA2B,WAAW;AAAA,EAC5D;AAEA,MAAI,UAAU;AACZ,WAAO,aAAa,wBAAwB,QAAQ;AAAA,EACtD;AAEA,MAAI,QAAQ;AACV,WAAO,aAAa,qBAAqB,MAAM;AAAA,EACjD;AACF;AAEA,MAAM,mBAAmB,CAAC,mBAA2B,eAAe,MAAM,SAAS,IAAI,CAAC;AAExF,MAAM,kBAAkB,CAAC,mBAA2B,eAAe,MAAM,GAAG,EAAE,CAAC;","names":[]}