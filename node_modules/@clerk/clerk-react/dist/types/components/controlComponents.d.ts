import type { HandleOAuthCallbackParams } from '@clerk/types';
import React from 'react';
import type { WithClerkProp } from '../types';
export declare const SignedIn: ({ children }: React.PropsWithChildren<unknown>) => JSX.Element | null;
export declare const SignedOut: ({ children }: React.PropsWithChildren<unknown>) => JSX.Element | null;
export declare const ClerkLoaded: ({ children }: React.PropsWithChildren<unknown>) => JSX.Element | null;
export declare const ClerkLoading: ({ children }: React.PropsWithChildren<unknown>) => JSX.Element | null;
export declare const RedirectToSignIn: {
    (props: Omit<WithClerkProp<import("@clerk/types").RedirectOptions>, "clerk">): React.JSX.Element | null;
    displayName: string;
};
export declare const RedirectToSignUp: {
    (props: Omit<WithClerkProp<import("@clerk/types").RedirectOptions>, "clerk">): React.JSX.Element | null;
    displayName: string;
};
export declare const RedirectToUserProfile: {
    (props: Omit<{
        clerk: import("@clerk/types").LoadedClerk;
    }, "clerk">): React.JSX.Element | null;
    displayName: string;
};
export declare const RedirectToOrganizationProfile: {
    (props: Omit<{
        clerk: import("@clerk/types").LoadedClerk;
    }, "clerk">): React.JSX.Element | null;
    displayName: string;
};
export declare const RedirectToCreateOrganization: {
    (props: Omit<{
        clerk: import("@clerk/types").LoadedClerk;
    }, "clerk">): React.JSX.Element | null;
    displayName: string;
};
export declare const AuthenticateWithRedirectCallback: {
    (props: Omit<WithClerkProp<HandleOAuthCallbackParams>, "clerk">): React.JSX.Element | null;
    displayName: string;
};
export declare const MultisessionAppSupport: ({ children }: React.PropsWithChildren<unknown>) => JSX.Element;
//# sourceMappingURL=controlComponents.d.ts.map