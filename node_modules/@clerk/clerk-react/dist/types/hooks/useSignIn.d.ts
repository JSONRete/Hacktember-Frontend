import type { SetActive, SetSession, SignInResource } from '@clerk/types';
type UseSignInReturn = {
    isLoaded: false;
    signIn: undefined;
    /**
     * @deprecated This method is deprecated and will be removed in the future. Use {@link Clerk.setActive} instead
     * Set the current session explicitly. Setting the session to `null` unsets the active session and signs out the user.
     * @param session Passed session resource object, session id (string version) or null
     * @param beforeEmit Callback run just before the active session is set to the passed object. Can be used to hook up for pre-navigation actions.
     */
    setSession: undefined;
    setActive: undefined;
} | {
    isLoaded: true;
    signIn: SignInResource;
    /**
     * @deprecated This method is deprecated and will be removed in the future. Use {@link Clerk.setActive} instead
     * Set the current session explicitly. Setting the session to `null` unsets the active session and signs out the user.
     * @param session Passed session resource object, session id (string version) or null
     * @param beforeEmit Callback run just before the active session is set to the passed object. Can be used to hook up for pre-navigation actions.
     */
    setSession: SetSession;
    setActive: SetActive;
};
type UseSignIn = () => UseSignInReturn;
export declare const useSignIn: UseSignIn;
export {};
//# sourceMappingURL=useSignIn.d.ts.map