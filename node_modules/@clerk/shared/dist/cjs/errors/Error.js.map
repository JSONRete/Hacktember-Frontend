{"version":3,"sources":["../../../src/errors/Error.ts"],"sourcesContent":["import type { ClerkAPIError, ClerkAPIErrorJSON } from '@clerk/types';\n\ninterface ClerkAPIResponseOptions {\n  data: ClerkAPIErrorJSON[];\n  status: number;\n}\n\n// For a comprehensive Metamask error list, please see\n// https://docs.metamask.io/guide/ethereum-provider.html#errors\nexport interface MetamaskError extends Error {\n  code: 4001 | 32602 | 32603;\n  message: string;\n  data?: unknown;\n}\n\nexport function isKnownError(error: any) {\n  return isClerkAPIResponseError(error) || isMetamaskError(error);\n}\n\nexport function isClerkAPIResponseError(err: any): err is ClerkAPIResponseError {\n  return 'clerkError' in err;\n}\n\nexport function isMetamaskError(err: any): err is MetamaskError {\n  return 'code' in err && [4001, 32602, 32603].includes(err.code) && 'message' in err;\n}\n\nexport function parseErrors(data: ClerkAPIErrorJSON[] = []): ClerkAPIError[] {\n  return data.length > 0 ? data.map(parseError) : [];\n}\n\nexport function parseError(error: ClerkAPIErrorJSON): ClerkAPIError {\n  return {\n    code: error.code,\n    message: error.message,\n    longMessage: error.long_message,\n    meta: {\n      paramName: error?.meta?.param_name,\n      sessionId: error?.meta?.session_id,\n      emailAddresses: error?.meta?.email_addresses,\n      zxcvbn: error?.meta?.zxcvbn,\n    },\n  };\n}\n\nexport class ClerkAPIResponseError extends Error {\n  clerkError: true;\n\n  status: number;\n  message: string;\n\n  errors: ClerkAPIError[];\n\n  constructor(message: string, { data, status }: ClerkAPIResponseOptions) {\n    super(message);\n\n    Object.setPrototypeOf(this, ClerkAPIResponseError.prototype);\n\n    this.status = status;\n    this.message = message;\n    this.clerkError = true;\n    this.errors = parseErrors(data);\n  }\n\n  public toString = () => {\n    return `[${this.name}]\\nMessage:${this.message}\\nStatus:${this.status}\\nSerialized errors: ${this.errors.map(e =>\n      JSON.stringify(e),\n    )}`;\n  };\n}\n\nexport class MagicLinkError extends Error {\n  code: string;\n\n  constructor(code: string) {\n    super(code);\n    this.code = code;\n    Object.setPrototypeOf(this, MagicLinkError.prototype);\n  }\n}\n// Check if the error is a MagicLinkError.\n\nexport function isMagicLinkError(err: Error): err is MagicLinkError {\n  return err instanceof MagicLinkError;\n}\n\nexport const MagicLinkErrorCode = {\n  Expired: 'expired',\n  Failed: 'failed',\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeO,SAAS,aAAa,OAAY;AACvC,SAAO,wBAAwB,KAAK,KAAK,gBAAgB,KAAK;AAChE;AAEO,SAAS,wBAAwB,KAAwC;AAC9E,SAAO,gBAAgB;AACzB;AAEO,SAAS,gBAAgB,KAAgC;AAC9D,SAAO,UAAU,OAAO,CAAC,MAAM,OAAO,KAAK,EAAE,SAAS,IAAI,IAAI,KAAK,aAAa;AAClF;AAEO,SAAS,YAAY,OAA4B,CAAC,GAAoB;AAC3E,SAAO,KAAK,SAAS,IAAI,KAAK,IAAI,UAAU,IAAI,CAAC;AACnD;AAEO,SAAS,WAAW,OAAyC;AAClE,SAAO;AAAA,IACL,MAAM,MAAM;AAAA,IACZ,SAAS,MAAM;AAAA,IACf,aAAa,MAAM;AAAA,IACnB,MAAM;AAAA,MACJ,WAAW,OAAO,MAAM;AAAA,MACxB,WAAW,OAAO,MAAM;AAAA,MACxB,gBAAgB,OAAO,MAAM;AAAA,MAC7B,QAAQ,OAAO,MAAM;AAAA,IACvB;AAAA,EACF;AACF;AAEO,MAAM,8BAA8B,MAAM;AAAA,EAQ/C,YAAY,SAAiB,EAAE,MAAM,OAAO,GAA4B;AACtE,UAAM,OAAO;AAUf,SAAO,WAAW,MAAM;AACtB,aAAO,IAAI,KAAK;AAAA,UAAkB,KAAK;AAAA,SAAmB,KAAK;AAAA,qBAA8B,KAAK,OAAO;AAAA,QAAI,OAC3G,KAAK,UAAU,CAAC;AAAA,MAClB;AAAA,IACF;AAZE,WAAO,eAAe,MAAM,sBAAsB,SAAS;AAE3D,SAAK,SAAS;AACd,SAAK,UAAU;AACf,SAAK,aAAa;AAClB,SAAK,SAAS,YAAY,IAAI;AAAA,EAChC;AAOF;AAEO,MAAM,uBAAuB,MAAM;AAAA,EAGxC,YAAY,MAAc;AACxB,UAAM,IAAI;AACV,SAAK,OAAO;AACZ,WAAO,eAAe,MAAM,eAAe,SAAS;AAAA,EACtD;AACF;AAGO,SAAS,iBAAiB,KAAmC;AAClE,SAAO,eAAe;AACxB;AAEO,MAAM,qBAAqB;AAAA,EAChC,SAAS;AAAA,EACT,QAAQ;AACV;","names":[]}