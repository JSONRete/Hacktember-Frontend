"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var deprecated_exports = {};
__export(deprecated_exports, {
  deprecated: () => deprecated,
  deprecatedProperty: () => deprecatedProperty
});
module.exports = __toCommonJS(deprecated_exports);
var import_runtimeEnvironment = require("./runtimeEnvironment");
const displayedWarnings = /* @__PURE__ */ new Set();
const deprecated = (fnName, warning, key) => {
  const messageId = key ?? fnName;
  if (displayedWarnings.has(messageId) || !(0, import_runtimeEnvironment.isDevelopmentEnvironment)()) {
    return;
  }
  displayedWarnings.add(messageId);
  console.warn(
    `DEPRECATION WARNING: "${fnName}" is deprecated and will be removed in the next major release.
${warning}`
  );
};
const deprecatedProperty = (cls, propName, warning, isStatic = false) => {
  const target = isStatic ? cls : cls.prototype;
  Object.defineProperty(target, propName, {
    get() {
      deprecated(propName, warning, `${cls.name}:${propName}`);
      return this["_" + propName];
    },
    set(v) {
      this["_" + propName] = v;
    }
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  deprecated,
  deprecatedProperty
});
//# sourceMappingURL=deprecated.js.map