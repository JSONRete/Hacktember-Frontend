"use strict";
var import_deprecated = require("./deprecated");
var import_runtimeEnvironment = require("./runtimeEnvironment");
jest.mock("./runtimeEnvironment", () => {
  return { isDevelopmentEnvironment: jest.fn(() => true) };
});
describe("deprecated(fnName, warning)", () => {
  let consoleWarnSpy;
  beforeEach(() => {
    consoleWarnSpy = jest.spyOn(global.console, "warn").mockImplementation();
  });
  afterEach(() => {
    consoleWarnSpy.mockRestore();
  });
  test("deprecate class method shows warning", () => {
    class Example {
      constructor() {
        this.getSomeMethod = (arg1, arg2) => {
          (0, import_deprecated.deprecated)("getSomeMethod", "Use `getSomeMethodElse` instead.");
          return `getSomeMethodValue:${arg1 || "-"}:${arg2 || "-"}`;
        };
      }
    }
    const example = new Example();
    expect(consoleWarnSpy).not.toBeCalled();
    expect(example.getSomeMethod("a", "b")).toEqual("getSomeMethodValue:a:b");
    expect(consoleWarnSpy).toBeCalledTimes(1);
    expect(consoleWarnSpy).toBeCalledWith(
      'DEPRECATION WARNING: "getSomeMethod" is deprecated and will be removed in the next major release.\nUse `getSomeMethodElse` instead.'
    );
    expect(example.getSomeMethod()).toEqual("getSomeMethodValue:-:-");
    expect(consoleWarnSpy).toBeCalledTimes(1);
  });
  test("deprecate static method shows warning", () => {
    class Example {
    }
    Example.getSomeStaticMethod = () => {
      (0, import_deprecated.deprecated)("getSomeStaticMethod", "Use `getSomeStaticMethodElse` instead.");
      return "getSomeStaticMethodValue";
    };
    expect(consoleWarnSpy).not.toBeCalled();
    expect(Example.getSomeStaticMethod()).toEqual("getSomeStaticMethodValue");
    expect(consoleWarnSpy).toBeCalledTimes(1);
    expect(consoleWarnSpy).toBeCalledWith(
      'DEPRECATION WARNING: "getSomeStaticMethod" is deprecated and will be removed in the next major release.\nUse `getSomeStaticMethodElse` instead.'
    );
    expect(Example.getSomeStaticMethod()).toEqual("getSomeStaticMethodValue");
    expect(consoleWarnSpy).toBeCalledTimes(1);
  });
  test("deprecate function shows warning", () => {
    const getSomeFunction = () => {
      (0, import_deprecated.deprecated)("getSomeFunction", "Use `getSomeFunctionElse` instead.");
      return "getSomeFunctionValue";
    };
    expect(consoleWarnSpy).not.toBeCalled();
    expect(getSomeFunction()).toEqual("getSomeFunctionValue");
    expect(consoleWarnSpy).toBeCalledTimes(1);
    expect(consoleWarnSpy).toBeCalledWith(
      'DEPRECATION WARNING: "getSomeFunction" is deprecated and will be removed in the next major release.\nUse `getSomeFunctionElse` instead.'
    );
    expect(getSomeFunction()).toEqual("getSomeFunctionValue");
    expect(consoleWarnSpy).toBeCalledTimes(1);
  });
  test("deprecate function with key shows warning", () => {
    const getSomeFunctionWithKey = () => {
      (0, import_deprecated.deprecated)("getSomeFunctionWithKey", "Use `getSomeFunctionWithKeyElse` instead.", "getSomeFunctionWithKey:key");
      return "getSomeFunctionWithKeyValue";
    };
    expect(consoleWarnSpy).not.toBeCalled();
    expect(getSomeFunctionWithKey()).toEqual("getSomeFunctionWithKeyValue");
    expect(consoleWarnSpy).toBeCalledTimes(1);
    expect(consoleWarnSpy).toBeCalledWith(
      'DEPRECATION WARNING: "getSomeFunctionWithKey" is deprecated and will be removed in the next major release.\nUse `getSomeFunctionWithKeyElse` instead.'
    );
    expect(getSomeFunctionWithKey()).toEqual("getSomeFunctionWithKeyValue");
    expect(consoleWarnSpy).toBeCalledTimes(1);
  });
  test("deprecate function with the same key does not show warning", () => {
    function V1() {
      const getSomeFunctionWithSameKey = () => {
        (0, import_deprecated.deprecated)(
          "getSomeFunctionWithSameKey",
          "Use `getSomeFunctionWithSameKeyElse` instead.",
          "getSomeFunctionWithSameKey:key"
        );
        return "getSomeFunctionWithSameKeyValue";
      };
      return getSomeFunctionWithSameKey;
    }
    function V2() {
      const getSomeFunctionWithSameKey = () => {
        (0, import_deprecated.deprecated)(
          "getSomeFunctionWithSameKey",
          "Use `getSomeFunctionWithSameKeyElse` instead.",
          "getSomeFunctionWithSameKey:key"
        );
        return "getSomeFunctionWithSameKeyValue";
      };
      return getSomeFunctionWithSameKey;
    }
    const getSomeFunctionWithSameKeyV1 = V1();
    const getSomeFunctionWithSameKeyV2 = V2();
    expect(consoleWarnSpy).not.toBeCalled();
    expect(getSomeFunctionWithSameKeyV1()).toEqual("getSomeFunctionWithSameKeyValue");
    expect(consoleWarnSpy).toBeCalledTimes(1);
    expect(getSomeFunctionWithSameKeyV1()).toEqual("getSomeFunctionWithSameKeyValue");
    expect(consoleWarnSpy).toBeCalledTimes(1);
    expect(getSomeFunctionWithSameKeyV2()).toEqual("getSomeFunctionWithSameKeyValue");
    expect(consoleWarnSpy).toBeCalledTimes(1);
  });
  describe("for non development environment", () => {
    beforeEach(() => {
      import_runtimeEnvironment.isDevelopmentEnvironment.mockReturnValue(false);
    });
    afterEach(() => {
      import_runtimeEnvironment.isDevelopmentEnvironment.mockReturnValue(true);
    });
    test("deprecate function does not show warning", () => {
      const getSomeFunctionInProd = () => {
        (0, import_deprecated.deprecated)("getSomeFunctionInProd", "Use `getSomeFunctionInProdElse` instead.");
        return "getSomeFunctionInProdValue";
      };
      expect(consoleWarnSpy).not.toBeCalled();
      expect(getSomeFunctionInProd()).toEqual("getSomeFunctionInProdValue");
      expect(getSomeFunctionInProd()).toEqual("getSomeFunctionInProdValue");
      expect(consoleWarnSpy).toBeCalledTimes(0);
    });
  });
});
describe("deprecatedProperty(cls, propName, warning, isStatic = false)", () => {
  let consoleWarnSpy;
  beforeEach(() => {
    consoleWarnSpy = jest.spyOn(global.console, "warn").mockImplementation();
  });
  afterEach(() => {
    consoleWarnSpy.mockRestore();
  });
  test("deprecate class property shows warning", () => {
    class Example {
      constructor(someProp) {
        this.someProp = someProp;
      }
    }
    (0, import_deprecated.deprecatedProperty)(Example, "someProp", "Use `somePropElse` instead.");
    const example = new Example("someProp-value");
    expect(consoleWarnSpy).not.toBeCalled();
    expect(example.someProp).toEqual("someProp-value");
    expect(consoleWarnSpy).toBeCalledTimes(1);
    expect(consoleWarnSpy).toBeCalledWith(
      'DEPRECATION WARNING: "someProp" is deprecated and will be removed in the next major release.\nUse `somePropElse` instead.'
    );
    expect(example.someProp).toEqual("someProp-value");
    expect(consoleWarnSpy).toBeCalledTimes(1);
  });
  test("deprecate class static property shows warning", () => {
    class Example {
    }
    (0, import_deprecated.deprecatedProperty)(Example, "someStaticProp", "Use `someStaticPropElse` instead.", true);
    Example.someStaticProp = "someStaticProp-value";
    expect(consoleWarnSpy).not.toBeCalled();
    expect(Example.someStaticProp).toEqual("someStaticProp-value");
    expect(consoleWarnSpy).toBeCalledTimes(1);
    expect(consoleWarnSpy).toBeCalledWith(
      'DEPRECATION WARNING: "someStaticProp" is deprecated and will be removed in the next major release.\nUse `someStaticPropElse` instead.'
    );
    expect(Example.someStaticProp).toEqual("someStaticProp-value");
    expect(consoleWarnSpy).toBeCalledTimes(1);
  });
  test("deprecate class readonly property shows warning", () => {
    class Example {
      constructor(someReadOnlyProp) {
        this.someReadOnlyProp = someReadOnlyProp;
      }
    }
    (0, import_deprecated.deprecatedProperty)(Example, "someReadOnlyProp", "Use `someReadOnlyPropElse` instead.");
    const example = new Example("someReadOnlyProp-value");
    expect(consoleWarnSpy).not.toBeCalled();
    expect(example.someReadOnlyProp).toEqual("someReadOnlyProp-value");
    expect(consoleWarnSpy).toBeCalledTimes(1);
    expect(consoleWarnSpy).toBeCalledWith(
      'DEPRECATION WARNING: "someReadOnlyProp" is deprecated and will be removed in the next major release.\nUse `someReadOnlyPropElse` instead.'
    );
    expect(example.someReadOnlyProp).toEqual("someReadOnlyProp-value");
    expect(consoleWarnSpy).toBeCalledTimes(1);
  });
  describe("for non development environment", () => {
    beforeEach(() => {
      import_runtimeEnvironment.isDevelopmentEnvironment.mockReturnValue(false);
    });
    afterEach(() => {
      import_runtimeEnvironment.isDevelopmentEnvironment.mockReturnValue(true);
    });
    test("deprecate class readonly property does not show warning", () => {
      class Example {
        constructor(someReadOnlyPropInProd) {
          this.someReadOnlyPropInProd = someReadOnlyPropInProd;
        }
      }
      (0, import_deprecated.deprecatedProperty)(Example, "someReadOnlyPropInProd", "Use `someReadOnlyPropInProdElse` instead.");
      const example = new Example("someReadOnlyPropInProd-value");
      expect(consoleWarnSpy).not.toBeCalled();
      expect(example.someReadOnlyPropInProd).toEqual("someReadOnlyPropInProd-value");
      expect(example.someReadOnlyPropInProd).toEqual("someReadOnlyPropInProd-value");
      expect(consoleWarnSpy).toBeCalledTimes(0);
    });
  });
});
//# sourceMappingURL=deprecated.test.js.map