{"version":3,"sources":["../../../src/utils/deprecated.test.ts"],"sourcesContent":["jest.mock('./runtimeEnvironment', () => {\n  return { isDevelopmentEnvironment: jest.fn(() => true) };\n});\n\nimport { deprecated, deprecatedProperty } from './deprecated';\nimport { isDevelopmentEnvironment } from './runtimeEnvironment';\n\ndescribe('deprecated(fnName, warning)', () => {\n  let consoleWarnSpy;\n\n  beforeEach(() => {\n    consoleWarnSpy = jest.spyOn(global.console, 'warn').mockImplementation();\n  });\n  afterEach(() => {\n    consoleWarnSpy.mockRestore();\n  });\n\n  test('deprecate class method shows warning', () => {\n    class Example {\n      getSomeMethod = (arg1?, arg2?) => {\n        deprecated('getSomeMethod', 'Use `getSomeMethodElse` instead.');\n        return `getSomeMethodValue:${arg1 || '-'}:${arg2 || '-'}`;\n      };\n    }\n\n    const example = new Example();\n\n    expect(consoleWarnSpy).not.toBeCalled();\n    expect(example.getSomeMethod('a', 'b')).toEqual('getSomeMethodValue:a:b');\n    expect(consoleWarnSpy).toBeCalledTimes(1);\n    expect(consoleWarnSpy).toBeCalledWith(\n      'DEPRECATION WARNING: \"getSomeMethod\" is deprecated and will be removed in the next major release.\\nUse `getSomeMethodElse` instead.',\n    );\n\n    expect(example.getSomeMethod()).toEqual('getSomeMethodValue:-:-');\n    expect(consoleWarnSpy).toBeCalledTimes(1);\n  });\n\n  test('deprecate static method shows warning', () => {\n    class Example {\n      static getSomeStaticMethod = () => {\n        deprecated('getSomeStaticMethod', 'Use `getSomeStaticMethodElse` instead.');\n        return 'getSomeStaticMethodValue';\n      };\n    }\n\n    expect(consoleWarnSpy).not.toBeCalled();\n    expect(Example.getSomeStaticMethod()).toEqual('getSomeStaticMethodValue');\n    expect(consoleWarnSpy).toBeCalledTimes(1);\n    expect(consoleWarnSpy).toBeCalledWith(\n      'DEPRECATION WARNING: \"getSomeStaticMethod\" is deprecated and will be removed in the next major release.\\nUse `getSomeStaticMethodElse` instead.',\n    );\n\n    expect(Example.getSomeStaticMethod()).toEqual('getSomeStaticMethodValue');\n    expect(consoleWarnSpy).toBeCalledTimes(1);\n  });\n\n  test('deprecate function shows warning', () => {\n    const getSomeFunction = () => {\n      deprecated('getSomeFunction', 'Use `getSomeFunctionElse` instead.');\n      return 'getSomeFunctionValue';\n    };\n\n    expect(consoleWarnSpy).not.toBeCalled();\n    expect(getSomeFunction()).toEqual('getSomeFunctionValue');\n    expect(consoleWarnSpy).toBeCalledTimes(1);\n    expect(consoleWarnSpy).toBeCalledWith(\n      'DEPRECATION WARNING: \"getSomeFunction\" is deprecated and will be removed in the next major release.\\nUse `getSomeFunctionElse` instead.',\n    );\n\n    expect(getSomeFunction()).toEqual('getSomeFunctionValue');\n    expect(consoleWarnSpy).toBeCalledTimes(1);\n  });\n\n  test('deprecate function with key shows warning', () => {\n    const getSomeFunctionWithKey = () => {\n      deprecated('getSomeFunctionWithKey', 'Use `getSomeFunctionWithKeyElse` instead.', 'getSomeFunctionWithKey:key');\n      return 'getSomeFunctionWithKeyValue';\n    };\n\n    expect(consoleWarnSpy).not.toBeCalled();\n    expect(getSomeFunctionWithKey()).toEqual('getSomeFunctionWithKeyValue');\n    expect(consoleWarnSpy).toBeCalledTimes(1);\n    expect(consoleWarnSpy).toBeCalledWith(\n      'DEPRECATION WARNING: \"getSomeFunctionWithKey\" is deprecated and will be removed in the next major release.\\nUse `getSomeFunctionWithKeyElse` instead.',\n    );\n\n    expect(getSomeFunctionWithKey()).toEqual('getSomeFunctionWithKeyValue');\n    expect(consoleWarnSpy).toBeCalledTimes(1);\n  });\n\n  test('deprecate function with the same key does not show warning', () => {\n    function V1() {\n      const getSomeFunctionWithSameKey = () => {\n        deprecated(\n          'getSomeFunctionWithSameKey',\n          'Use `getSomeFunctionWithSameKeyElse` instead.',\n          'getSomeFunctionWithSameKey:key',\n        );\n        return 'getSomeFunctionWithSameKeyValue';\n      };\n      return getSomeFunctionWithSameKey;\n    }\n\n    function V2() {\n      const getSomeFunctionWithSameKey = () => {\n        deprecated(\n          'getSomeFunctionWithSameKey',\n          'Use `getSomeFunctionWithSameKeyElse` instead.',\n          'getSomeFunctionWithSameKey:key',\n        );\n        return 'getSomeFunctionWithSameKeyValue';\n      };\n\n      return getSomeFunctionWithSameKey;\n    }\n\n    const getSomeFunctionWithSameKeyV1 = V1();\n    const getSomeFunctionWithSameKeyV2 = V2();\n\n    expect(consoleWarnSpy).not.toBeCalled();\n    expect(getSomeFunctionWithSameKeyV1()).toEqual('getSomeFunctionWithSameKeyValue');\n    expect(consoleWarnSpy).toBeCalledTimes(1);\n\n    expect(getSomeFunctionWithSameKeyV1()).toEqual('getSomeFunctionWithSameKeyValue');\n    expect(consoleWarnSpy).toBeCalledTimes(1);\n\n    // does not show warning since the consoleWarnSpy counter is 1\n    expect(getSomeFunctionWithSameKeyV2()).toEqual('getSomeFunctionWithSameKeyValue');\n    expect(consoleWarnSpy).toBeCalledTimes(1);\n  });\n\n  describe('for non development environment', () => {\n    beforeEach(() => {\n      (isDevelopmentEnvironment as jest.Mock).mockReturnValue(false);\n    });\n    afterEach(() => {\n      (isDevelopmentEnvironment as jest.Mock).mockReturnValue(true);\n    });\n\n    test('deprecate function does not show warning', () => {\n      const getSomeFunctionInProd = () => {\n        deprecated('getSomeFunctionInProd', 'Use `getSomeFunctionInProdElse` instead.');\n        return 'getSomeFunctionInProdValue';\n      };\n\n      expect(consoleWarnSpy).not.toBeCalled();\n      // call it twice to verify that it's never called\n      expect(getSomeFunctionInProd()).toEqual('getSomeFunctionInProdValue');\n      expect(getSomeFunctionInProd()).toEqual('getSomeFunctionInProdValue');\n      expect(consoleWarnSpy).toBeCalledTimes(0);\n    });\n  });\n});\n\ndescribe('deprecatedProperty(cls, propName, warning, isStatic = false)', () => {\n  let consoleWarnSpy;\n\n  beforeEach(() => {\n    consoleWarnSpy = jest.spyOn(global.console, 'warn').mockImplementation();\n  });\n  afterEach(() => {\n    consoleWarnSpy.mockRestore();\n  });\n\n  test('deprecate class property shows warning', () => {\n    class Example {\n      someProp: string;\n      constructor(someProp: string) {\n        this.someProp = someProp;\n      }\n    }\n\n    deprecatedProperty(Example, 'someProp', 'Use `somePropElse` instead.');\n\n    const example = new Example('someProp-value');\n\n    expect(consoleWarnSpy).not.toBeCalled();\n    expect(example.someProp).toEqual('someProp-value');\n    expect(consoleWarnSpy).toBeCalledTimes(1);\n    expect(consoleWarnSpy).toBeCalledWith(\n      'DEPRECATION WARNING: \"someProp\" is deprecated and will be removed in the next major release.\\nUse `somePropElse` instead.',\n    );\n\n    expect(example.someProp).toEqual('someProp-value');\n    expect(consoleWarnSpy).toBeCalledTimes(1);\n  });\n\n  test('deprecate class static property shows warning', () => {\n    class Example {\n      static someStaticProp: string;\n    }\n\n    deprecatedProperty(Example, 'someStaticProp', 'Use `someStaticPropElse` instead.', true);\n\n    Example.someStaticProp = 'someStaticProp-value';\n    expect(consoleWarnSpy).not.toBeCalled();\n\n    expect(Example.someStaticProp).toEqual('someStaticProp-value');\n    expect(consoleWarnSpy).toBeCalledTimes(1);\n    expect(consoleWarnSpy).toBeCalledWith(\n      'DEPRECATION WARNING: \"someStaticProp\" is deprecated and will be removed in the next major release.\\nUse `someStaticPropElse` instead.',\n    );\n\n    expect(Example.someStaticProp).toEqual('someStaticProp-value');\n    expect(consoleWarnSpy).toBeCalledTimes(1);\n  });\n\n  test('deprecate class readonly property shows warning', () => {\n    class Example {\n      readonly someReadOnlyProp: string;\n      constructor(someReadOnlyProp: string) {\n        this.someReadOnlyProp = someReadOnlyProp;\n      }\n    }\n\n    deprecatedProperty(Example, 'someReadOnlyProp', 'Use `someReadOnlyPropElse` instead.');\n\n    const example = new Example('someReadOnlyProp-value');\n\n    expect(consoleWarnSpy).not.toBeCalled();\n    expect(example.someReadOnlyProp).toEqual('someReadOnlyProp-value');\n    expect(consoleWarnSpy).toBeCalledTimes(1);\n    expect(consoleWarnSpy).toBeCalledWith(\n      'DEPRECATION WARNING: \"someReadOnlyProp\" is deprecated and will be removed in the next major release.\\nUse `someReadOnlyPropElse` instead.',\n    );\n\n    expect(example.someReadOnlyProp).toEqual('someReadOnlyProp-value');\n    expect(consoleWarnSpy).toBeCalledTimes(1);\n  });\n\n  describe('for non development environment', () => {\n    beforeEach(() => {\n      (isDevelopmentEnvironment as jest.Mock).mockReturnValue(false);\n    });\n    afterEach(() => {\n      (isDevelopmentEnvironment as jest.Mock).mockReturnValue(true);\n    });\n\n    test('deprecate class readonly property does not show warning', () => {\n      class Example {\n        readonly someReadOnlyPropInProd: string;\n        constructor(someReadOnlyPropInProd: string) {\n          this.someReadOnlyPropInProd = someReadOnlyPropInProd;\n        }\n      }\n\n      deprecatedProperty(Example, 'someReadOnlyPropInProd', 'Use `someReadOnlyPropInProdElse` instead.');\n\n      const example = new Example('someReadOnlyPropInProd-value');\n\n      expect(consoleWarnSpy).not.toBeCalled();\n      // call it twice to verify that it's never called\n      expect(example.someReadOnlyPropInProd).toEqual('someReadOnlyPropInProd-value');\n      expect(example.someReadOnlyPropInProd).toEqual('someReadOnlyPropInProd-value');\n      expect(consoleWarnSpy).toBeCalledTimes(0);\n    });\n  });\n});\n"],"mappings":"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","names":[]}