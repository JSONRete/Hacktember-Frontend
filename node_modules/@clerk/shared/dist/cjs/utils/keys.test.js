"use strict";
var import_keys = require("./keys");
describe("buildPublishableKey(key)", () => {
  const cases = [
    ["example.clerk.accounts.dev", "pk_live_ZXhhbXBsZS5jbGVyay5hY2NvdW50cy5kZXYk"],
    ["foo-bar-13.clerk.accounts.dev", "pk_test_Zm9vLWJhci0xMy5jbGVyay5hY2NvdW50cy5kZXYk"]
  ];
  test.each(cases)(
    "given %p as a frontend api, returns publishable key %p",
    (frontendApi, expectedPublishableKeyStr) => {
      const result = (0, import_keys.buildPublishableKey)(frontendApi);
      expect(result).toEqual(expectedPublishableKeyStr);
    }
  );
});
describe("parsePublishableKey(key)", () => {
  const cases = [
    [null, null],
    [void 0, null],
    ["", null],
    ["whatever", null],
    [
      "pk_live_ZXhhbXBsZS5jbGVyay5hY2NvdW50cy5kZXYk",
      { instanceType: "production", frontendApi: "example.clerk.accounts.dev" }
    ],
    [
      "pk_test_Zm9vLWJhci0xMy5jbGVyay5hY2NvdW50cy5kZXYk",
      { instanceType: "development", frontendApi: "foo-bar-13.clerk.accounts.dev" }
    ]
  ];
  test.each(cases)("given %p as a publishable key string, returns %p", (publishableKeyStr, expectedPublishableKey) => {
    const result = (0, import_keys.parsePublishableKey)(publishableKeyStr);
    expect(result).toEqual(expectedPublishableKey);
  });
});
describe("isPublishableKey(key)", () => {
  it("returns true if the key is a valid publishable key", () => {
    expect((0, import_keys.isPublishableKey)("pk_live_Y2xlcmsuY2xlcmsuZGV2JA==")).toBe(true);
  });
  it("returns false if the key is not a valid publishable key", () => {
    expect((0, import_keys.isPublishableKey)("clerk.clerk.com")).toBe(false);
  });
});
describe("isLegacyFrontendApiKey(key)", () => {
  it("returns true if the key is a valid legacy frontend Api key", () => {
    expect((0, import_keys.isLegacyFrontendApiKey)("clerk.clerk.com")).toBe(true);
  });
  it("returns true if the key is not a valid legacy frontend Api key", () => {
    expect((0, import_keys.isLegacyFrontendApiKey)("pk_live_Y2xlcmsuY2xlcmsuZGV2JA==")).toBe(false);
  });
});
describe("isDevOrStagingUrl(url)", () => {
  const { isDevOrStagingUrl } = (0, import_keys.createDevOrStagingUrlCache)();
  const goodUrls = [
    ["https://www.google.com", false],
    ["https://www.clerk.dev", false],
    ["https://www.lclclerk.com", false],
    ["clerk.prod.lclclerk.com", false],
    ["something.dev.lclclerk.com", true],
    ["something.lcl.dev", true],
    ["https://www.something.stg.lclclerk.com", true],
    [new URL("https://www.lclclerk.com"), false],
    [new URL("https://www.something.stg.lclclerk.com"), true],
    [new URL("https://www.something.stg.lclclerk.com:4000"), true]
  ];
  const badUrls = [
    ["", false],
    [null, false]
  ];
  test.each([...goodUrls, ...badUrls])(".isDevOrStagingUrl(%s)", (a, expected) => {
    expect(isDevOrStagingUrl(a)).toBe(expected);
  });
});
//# sourceMappingURL=keys.test.js.map