"use strict";
var import_proxy = require("./proxy");
describe("isValidProxyUrl(key)", () => {
  it("returns true if the proxyUrl is valid", () => {
    expect((0, import_proxy.isValidProxyUrl)("https://proxy-app.dev/api/__clerk")).toBe(true);
  });
  it("returns true if the proxyUrl is valid", () => {
    expect((0, import_proxy.isValidProxyUrl)("/api/__clerk")).toBe(true);
  });
  it("returns false if the proxyUrl is invalid", () => {
    expect((0, import_proxy.isValidProxyUrl)("proxy-app.dev/api/__clerk")).toBe(false);
  });
});
describe("isProxyUrlRelative(key)", () => {
  it("returns true if the proxyUrl starts with `/`", () => {
    expect((0, import_proxy.isProxyUrlRelative)("/api/__clerk")).toBe(true);
  });
  it("returns false if the proxyUrl does not starts with `/`", () => {
    expect((0, import_proxy.isProxyUrlRelative)("proxy-app.dev/api/__clerk==")).toBe(false);
  });
});
describe("isHttpOrHttps(key)", () => {
  it.each([
    ["http://clerk.com/api/__clerk", true],
    ["http://clerk.com/api/__clerk", true],
    [void 0, false],
    ["/api/__clerk", false],
    ["", false]
  ])(".isHttpOrHttps(%s)", (key, expected) => {
    expect((0, import_proxy.isHttpOrHttps)(key)).toBe(expected);
  });
});
describe("proxyUrlToAbsoluteURL(url)", () => {
  const currentLocation = global.window.location;
  beforeEach(() => {
    Object.defineProperty(global.window, "location", {
      get() {
        return {
          origin: "https://clerk.com"
        };
      },
      configurable: true
    });
  });
  afterEach(() => {
    Object.defineProperty(global.window, "location", {
      value: currentLocation,
      writable: true
    });
  });
  it("returns an absolute URL made from window.location.origin and the partial a path", () => {
    expect((0, import_proxy.proxyUrlToAbsoluteURL)("/api/__clerk")).toBe("https://clerk.com/api/__clerk");
  });
  it("returns the same value as the parameter given as it already an absolute URL", () => {
    expect((0, import_proxy.proxyUrlToAbsoluteURL)("https://clerk.com/api/__clerk")).toBe("https://clerk.com/api/__clerk");
  });
  it("returns empty string if parameter is undefined", () => {
    expect((0, import_proxy.proxyUrlToAbsoluteURL)(void 0)).toBe("");
  });
});
//# sourceMappingURL=proxy.test.js.map