{"version":3,"sources":["../../../../src/utils/color/cssColorUtils.test.ts"],"sourcesContent":["import type { Color } from '@clerk/types';\n\nimport { colorToSameTypeString, hexStringToRgbaColor, stringToHslaColor, stringToSameTypeColor } from './cssColorUtils';\n\ndescribe('stringToHslaColor(color)', function () {\n  const hsla = { h: 195, s: 1, l: 0.5 };\n  const cases: Array<[string, Color | null]> = [\n    ['', null],\n    ['transparent', { h: 0, s: 0, l: 0, a: 0 }],\n    ['#00bfff', hsla],\n    ['00bfff', hsla],\n    ['rgb(0, 191, 255)', hsla],\n    ['rgba(0, 191, 255, 0.3)', { ...hsla, a: 0.3 }],\n  ];\n\n  it.each(cases)('.stringToHslaColor(%s) => %s', (a, expected) => {\n    expect(stringToHslaColor(a)).toEqual(expected);\n  });\n});\n\ndescribe('hexStringToRgbaColor(color)', function () {\n  const cases: Array<[string, Color | null]> = [\n    ['#00bfff', { r: 0, g: 191, b: 255 }],\n    ['00bfff', { r: 0, g: 191, b: 255 }],\n  ];\n\n  it.each(cases)('.hexStringToRgbaColor(%s) => %s', (a, expected) => {\n    expect(hexStringToRgbaColor(a)).toEqual(expected);\n  });\n});\n\ndescribe('stringToSameTypeColor(color)', function () {\n  const cases: Array<[string, Color | null]> = [\n    ['', ''],\n    ['invalid', ''],\n    ['12ff12', '#12ff12'],\n    ['#12ff12', '#12ff12'],\n    ['1ff', '#1ff'],\n    ['transparent', 'transparent'],\n    ['rgb(100,100,100)', { r: 100, g: 100, b: 100, a: undefined }],\n    ['rgba(100,100,100,0.5)', { r: 100, g: 100, b: 100, a: 0.5 }],\n    ['rgb(100,100,100)', { r: 100, g: 100, b: 100, a: undefined }],\n    ['rgba(100,100,100,0.5)', { r: 100, g: 100, b: 100, a: 0.5 }],\n    ['hsl(244,66%,33%)', { h: 244, s: 0.66, l: 0.33, a: undefined }],\n    ['hsla(244,66%,33%,0.5)', { h: 244, s: 0.66, l: 0.33, a: 0.5 }],\n    ['hsl(244,66%,33)', ''],\n    ['hsla(244,66%,33,0.5)', ''],\n  ];\n\n  it.each(cases)('.stringToSameTypeColor(%s) => %s', (a, expected) => {\n    expect(stringToSameTypeColor(a)).toEqual(expected);\n  });\n});\n\ndescribe('colorToSameTypeString(color)', function () {\n  const cases: Array<[Color, string]> = [\n    ['', ''],\n    ['invalid', ''],\n    ['#12ff12', '#12ff12'],\n    ['#12ff12', '#12ff12'],\n    ['#1ff', '#1ff'],\n    [{ r: 100, g: 100, b: 100, a: undefined }, 'rgb(100,100,100)'],\n    [{ r: 100, g: 100, b: 100, a: 0.5 }, 'rgba(100,100,100,0.5)'],\n    [{ h: 100, s: 0.55, l: 0.33, a: undefined }, 'hsl(100,55%,33%)'],\n    [{ h: 100, s: 1, l: 1, a: 0.5 }, 'hsla(100,100%,100%,0.5)'],\n  ];\n\n  it.each(cases)('.colorToSameTypeString(%s) => %s', (a, expected) => {\n    expect(colorToSameTypeString(a)).toEqual(expected);\n  });\n});\n"],"mappings":"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","names":[]}