{"version":3,"sources":["../../../src/utils/deprecated.ts"],"sourcesContent":["import { isDevelopmentEnvironment } from './runtimeEnvironment';\n/**\n * Mark class methods or functions as deprecated.\n *\n * A console WARNING will be displayed when class methods\n * or functions are invoked.\n *\n * Examples\n * 1. Deprecate class method\n * class Example {\n *   getSomething = (arg1, arg2) => {\n *       deprecated('Example.getSomething', 'Use `getSomethingElse` instead.');\n *       return `getSomethingValue:${arg1 || '-'}:${arg2 || '-'}`;\n *   };\n * }\n *\n * 2. Deprecate function\n * const getSomething = () => {\n *   deprecated('getSomething', 'Use `getSomethingElse` instead.');\n *   return 'getSomethingValue';\n * };\n */\nconst displayedWarnings = new Set<string>();\nexport const deprecated = (fnName: string, warning: string, key?: string): void => {\n  const messageId = key ?? fnName;\n  if (displayedWarnings.has(messageId) || !isDevelopmentEnvironment()) {\n    return;\n  }\n  displayedWarnings.add(messageId);\n\n  console.warn(\n    `DEPRECATION WARNING: \"${fnName}\" is deprecated and will be removed in the next major release.\\n${warning}`,\n  );\n};\n/**\n * Mark class properties as deprecated.\n *\n * A console WARNING will be displayed when class properties are being accessed.\n *\n * 1. Deprecate class property\n * class Example {\n *   something: string;\n *   constructor(something: string) {\n *     this.something = something;\n *   }\n * }\n *\n * deprecatedProperty(Example, 'something', 'Use `somethingElse` instead.');\n *\n * 2. Deprecate class static property\n * class Example {\n *   static something: string;\n * }\n *\n * deprecatedProperty(Example, 'something', 'Use `somethingElse` instead.', true);\n */\ntype AnyClass = new (...args: any[]) => any;\n\nexport const deprecatedProperty = (cls: AnyClass, propName: string, warning: string, isStatic = false): void => {\n  const target = isStatic ? cls : cls.prototype;\n\n  Object.defineProperty(target, propName, {\n    get() {\n      deprecated(propName, warning, `${cls.name}:${propName}`);\n      return this['_' + propName];\n    },\n    set(v: unknown) {\n      this['_' + propName] = v;\n    },\n  });\n};\n"],"mappings":"AAAA,SAAS,gCAAgC;AAsBzC,MAAM,oBAAoB,oBAAI,IAAY;AACnC,MAAM,aAAa,CAAC,QAAgB,SAAiB,QAAuB;AACjF,QAAM,YAAY,OAAO;AACzB,MAAI,kBAAkB,IAAI,SAAS,KAAK,CAAC,yBAAyB,GAAG;AACnE;AAAA,EACF;AACA,oBAAkB,IAAI,SAAS;AAE/B,UAAQ;AAAA,IACN,yBAAyB;AAAA,EAAyE;AAAA,EACpG;AACF;AAyBO,MAAM,qBAAqB,CAAC,KAAe,UAAkB,SAAiB,WAAW,UAAgB;AAC9G,QAAM,SAAS,WAAW,MAAM,IAAI;AAEpC,SAAO,eAAe,QAAQ,UAAU;AAAA,IACtC,MAAM;AACJ,iBAAW,UAAU,SAAS,GAAG,IAAI,QAAQ,UAAU;AACvD,aAAO,KAAK,MAAM,QAAQ;AAAA,IAC5B;AAAA,IACA,IAAI,GAAY;AACd,WAAK,MAAM,QAAQ,IAAI;AAAA,IACzB;AAAA,EACF,CAAC;AACH;","names":[]}