{"version":3,"sources":["../../../src/utils/object.test.ts"],"sourcesContent":["import { deepCamelToSnake, deepSnakeToCamel } from './object';\n\ndescribe('camelToSnakeKeys', () => {\n  it('creates a copy and does not modify the original', () => {\n    const original = {\n      an_arr: [{ hello_there: 'hey' }],\n      a_nested_object: { a_message: 'hey' },\n    };\n    const originalCopy = { ...original };\n    const res = deepSnakeToCamel(original);\n    expect(res).toStrictEqual({\n      anArr: [{ helloThere: 'hey' }],\n      aNestedObject: { aMessage: 'hey' },\n    });\n    expect(original).toStrictEqual(originalCopy);\n    expect(original === res).toBeFalsy();\n  });\n\n  it('transforms camelCased keys to snake_cased', () => {\n    expect(deepCamelToSnake({ key: 1, anotherKey: 2 })).toStrictEqual({\n      key: 1,\n      another_key: 2,\n    });\n\n    expect(\n      deepCamelToSnake({\n        key: 1,\n        anotherKey: 2,\n        nestAttribute: { nestedKey: 3 },\n      }),\n    ).toStrictEqual({\n      key: 1,\n      another_key: 2,\n      nest_attribute: {\n        nested_key: 3,\n      },\n    });\n  });\n\n  it('handles null and undefined values', () => {\n    expect(deepCamelToSnake({ key: 1, anotherKey: null })).toStrictEqual({\n      key: 1,\n      another_key: null,\n    });\n\n    expect(\n      deepCamelToSnake({\n        key: 1,\n        anotherKey: 2,\n        nestAttribute: { nestedKey: null },\n      }),\n    ).toStrictEqual({\n      key: 1,\n      another_key: 2,\n      nest_attribute: {\n        nested_key: null,\n      },\n    });\n  });\n\n  it('transforms and removes camelCased keys', () => {\n    const sampleObject = deepCamelToSnake({ key: 1, anotherKey: 2 });\n    expect(sampleObject).not.toHaveProperty('anotherKey');\n    expect(sampleObject).toHaveProperty('another_key');\n  });\n\n  it('deeply transforms objects and arrays to camelCase', () => {\n    const sample = {\n      sessions: [\n        {\n          last_active_at: 1647133602586,\n          user: {\n            primary_web3_wallet_id: null,\n            email_addresses: [\n              {\n                email_address: 'n@ck.dev',\n                verification: {\n                  status: 'verified',\n                  strategy: 'email_link',\n                  expire_at: 1645216476574,\n                },\n                linked_to: [{ type: 'oauth_google', id: 'idn_25QqWb' }],\n              },\n            ],\n            web3_wallets: [],\n            external_accounts: [\n              {\n                identification_id: 'idn_25QqWbzargsao',\n                provider_user_id: '106087',\n              },\n            ],\n          },\n        },\n      ],\n      sign_in_attempt: null,\n    };\n\n    const expected = {\n      sessions: [\n        {\n          user: {\n            primaryWeb3WalletId: null,\n            emailAddresses: [\n              {\n                verification: {\n                  status: 'verified',\n                  strategy: 'email_link',\n                  expireAt: 1645216476574,\n                },\n                emailAddress: 'n@ck.dev',\n                linkedTo: [\n                  {\n                    type: 'oauth_google',\n                    id: 'idn_25QqWb',\n                  },\n                ],\n              },\n            ],\n            web3Wallets: [],\n            externalAccounts: [\n              {\n                identificationId: 'idn_25QqWbzargsao',\n                providerUserId: '106087',\n              },\n            ],\n          },\n          lastActiveAt: 1647133602586,\n        },\n      ],\n      signInAttempt: null,\n    };\n    const res = deepSnakeToCamel(sample);\n    expect(res).toStrictEqual(expected);\n  });\n\n  it('prioritizes the camelCased property', () => {\n    const sampleObject = deepCamelToSnake({ oneKey: 1, one_key: 2 });\n    const anotherSampleObject = deepCamelToSnake({ one_key: 2, oneKey: 1 });\n\n    expect(sampleObject.one_key).toEqual(1);\n    expect(sampleObject).not.toHaveProperty('oneKey');\n    expect(anotherSampleObject.one_key).toEqual(1);\n    expect(anotherSampleObject).not.toHaveProperty('oneKey');\n  });\n});\n"],"mappings":"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","names":[]}