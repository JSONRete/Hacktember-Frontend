import type { ClerkAPIError, ClerkAPIErrorJSON } from '@clerk/types';
interface ClerkAPIResponseOptions {
    data: ClerkAPIErrorJSON[];
    status: number;
}
export interface MetamaskError extends Error {
    code: 4001 | 32602 | 32603;
    message: string;
    data?: unknown;
}
export declare function isKnownError(error: any): boolean;
export declare function isClerkAPIResponseError(err: any): err is ClerkAPIResponseError;
export declare function isMetamaskError(err: any): err is MetamaskError;
export declare function parseErrors(data?: ClerkAPIErrorJSON[]): ClerkAPIError[];
export declare function parseError(error: ClerkAPIErrorJSON): ClerkAPIError;
export declare class ClerkAPIResponseError extends Error {
    clerkError: true;
    status: number;
    message: string;
    errors: ClerkAPIError[];
    constructor(message: string, { data, status }: ClerkAPIResponseOptions);
    toString: () => string;
}
export declare class MagicLinkError extends Error {
    code: string;
    constructor(code: string);
}
export declare function isMagicLinkError(err: Error): err is MagicLinkError;
export declare const MagicLinkErrorCode: {
    Expired: string;
    Failed: string;
};
export {};
//# sourceMappingURL=Error.d.ts.map