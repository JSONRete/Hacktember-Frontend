import type { ActiveSessionResource, ClientResource, LoadedClerk, OrganizationInvitationResource, OrganizationMembershipResource, OrganizationResource, UserResource } from '@clerk/types';
import type { PropsWithChildren } from 'react';
import React from 'react';
declare const ClerkInstanceContext: React.Context<{
    value: LoadedClerk;
} | undefined>, useClerkInstanceContext: () => LoadedClerk;
declare const UserContext: React.Context<{
    value: UserResource | null | undefined;
} | undefined>, useUserContext: () => UserResource | null | undefined;
declare const ClientContext: React.Context<{
    value: ClientResource | null | undefined;
} | undefined>, useClientContext: () => ClientResource | null | undefined;
declare const SessionContext: React.Context<{
    value: ActiveSessionResource | null | undefined;
} | undefined>, useSessionContext: () => ActiveSessionResource | null | undefined;
type OrganizationContextProps = {
    organization: OrganizationResource | null | undefined;
    lastOrganizationInvitation: OrganizationInvitationResource | null | undefined;
    lastOrganizationMember: OrganizationMembershipResource | null | undefined;
};
declare const useOrganizationContext: () => {
    organization: OrganizationResource | null | undefined;
    lastOrganizationInvitation: OrganizationInvitationResource | null | undefined;
    lastOrganizationMember: OrganizationMembershipResource | null | undefined;
};
declare const OrganizationProvider: ({ children, organization, lastOrganizationMember, lastOrganizationInvitation, swrConfig, }: PropsWithChildren<OrganizationContextProps & {
    swrConfig?: any;
}>) => React.JSX.Element;
/**
 * @deprecated use OrganizationProvider instead
 */
export declare const OrganizationContext: ({ children, organization, lastOrganizationMember, lastOrganizationInvitation, swrConfig, }: PropsWithChildren<OrganizationContextProps & {
    swrConfig?: any;
}>) => React.JSX.Element;
export { ClientContext, useClientContext, OrganizationProvider, useOrganizationContext, UserContext, useUserContext, SessionContext, useSessionContext, ClerkInstanceContext, useClerkInstanceContext, };
//# sourceMappingURL=contexts.d.ts.map