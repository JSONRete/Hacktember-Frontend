export type ValueOrSetter<T = unknown> = (size: T | ((_size: T) => T)) => void;
export type PaginatedResources<T = unknown> = {
    data: T[];
    count: number;
    isLoading: boolean;
    isFetching: boolean;
    isError: boolean;
    page: number;
    pageCount: number;
    fetchPage: ValueOrSetter<number>;
    fetchPrevious: () => void;
    fetchNext: () => void;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
};
export type PaginatedResourcesWithDefault<T> = {
    [K in keyof PaginatedResources<T>]: PaginatedResources<T>[K] extends boolean ? false : PaginatedResources<T>[K] | undefined;
};
//# sourceMappingURL=types.d.ts.map