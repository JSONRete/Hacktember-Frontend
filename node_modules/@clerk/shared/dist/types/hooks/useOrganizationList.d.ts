import type { CreateOrganizationParams, GetUserOrganizationInvitationsParams, GetUserOrganizationMembershipParams, GetUserOrganizationSuggestionsParams, OrganizationMembershipResource, OrganizationResource, OrganizationSuggestionResource, SetActive, UserOrganizationInvitationResource } from '@clerk/types';
import type { PaginatedResources, PaginatedResourcesWithDefault } from './types';
type UseOrganizationListParams = {
    userMemberships?: true | (GetUserOrganizationMembershipParams & {
        infinite?: boolean;
        keepPreviousData?: boolean;
    });
    userInvitations?: true | (GetUserOrganizationInvitationsParams & {
        infinite?: boolean;
        keepPreviousData?: boolean;
    });
    userSuggestions?: true | (GetUserOrganizationSuggestionsParams & {
        infinite?: boolean;
        keepPreviousData?: boolean;
    });
};
type OrganizationList = ReturnType<typeof createOrganizationList>;
type UseOrganizationListReturn = {
    isLoaded: false;
    /**
     * @deprecated Use userMemberships instead
     */
    organizationList: undefined;
    createOrganization: undefined;
    setActive: undefined;
    userMemberships: PaginatedResourcesWithDefault<OrganizationMembershipResource>;
    userInvitations: PaginatedResourcesWithDefault<UserOrganizationInvitationResource>;
    userSuggestions: PaginatedResourcesWithDefault<OrganizationSuggestionResource>;
} | {
    isLoaded: boolean;
    /**
     * @deprecated Use userMemberships instead
     */
    organizationList: OrganizationList;
    createOrganization: (params: CreateOrganizationParams) => Promise<OrganizationResource>;
    setActive: SetActive;
    userMemberships: PaginatedResources<OrganizationMembershipResource>;
    userInvitations: PaginatedResources<UserOrganizationInvitationResource>;
    userSuggestions: PaginatedResources<OrganizationSuggestionResource>;
};
type UseOrganizationList = (params?: UseOrganizationListParams) => UseOrganizationListReturn;
export declare const useOrganizationList: UseOrganizationList;
declare function createOrganizationList(organizationMemberships: OrganizationMembershipResource[]): {
    membership: OrganizationMembershipResource;
    organization: OrganizationResource;
}[];
export {};
//# sourceMappingURL=useOrganizationList.d.ts.map